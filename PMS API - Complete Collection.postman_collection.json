{
	"info": {
		"_postman_id": "dd183b46-8cd6-4ee0-bb52-284bd1a7793e",
		"name": "PMS API - Complete Collection",
		"description": "Complete Project Management System API with proper structure",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23658513"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('userId', jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"username\": \"{{userUsername}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"password\": \"{{userPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{userUsername}}\",\n  \"password\": \"{{userPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/sign-in",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/sign-out",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"sign-out"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email Verification",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/email-verification?t=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"email-verification"
							],
							"query": [
								{
									"key": "t",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send verification email",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/email-verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"email-verification"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication endpoints"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('username');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": [
						{
							"name": "Get Profile",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "99"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "60"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "237"
								},
								{
									"key": "ETag",
									"value": "W/\"ed-8mHXshMr4ENTDoT9Xp/jR3BJrDs\""
								},
								{
									"key": "Date",
									"value": "Thu, 21 Aug 2025 19:03:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"0198ce02-768d-7cc1-8d01-1097c4675acf\",\n    \"email\": \"gautam03gt@gmail.com\",\n    \"username\": \"gautam\",\n    \"firstName\": \"rosalyn\",\n    \"lastName\": \"wilderman\",\n    \"createdAt\": \"2025-08-21T19:02:04.685Z\",\n    \"modifiedAt\": \"2025-08-21T19:02:04.685Z\",\n    \"deletedAt\": null\n}"
						}
					]
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/search?q=john",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "john"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Email Verification",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/check-email-verification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"check-email-verification"
							]
						}
					},
					"response": []
				}
			],
			"description": "User management endpoints"
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "List Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Organizations listed', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Organization created', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.environment.set('organizationId', jsonData.data.id);",
									"    pm.environment.set('inviteCode', jsonData.data.inviteCode);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{$randomCompanyName}}\",\n  \"description\": \"{{$randomCatchPhrase}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organization Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite User to Organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"role\": \"MEMBER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{organizationId}}/invite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"invite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Join Organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"inviteCode\": \"{{inviteCode}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/join",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"join"
							]
						}
					},
					"response": []
				}
			],
			"description": "Organization management"
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "List Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Projects listed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('projects');",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"    pm.expect(jsonData.data.projects).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects?limit=20&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "status",
									"value": "ACTIVE",
									"disabled": true
								},
								{
									"key": "organizationId",
									"value": "{{organizationId}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data.status).to.eql('PLANNING');",
									"    pm.environment.set('projectId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{$randomProductName}} Development\",\n  \"description\": \"{{$randomLoremParagraph}}\",\n  \"priority\": \"HIGH\",\n  \"startDate\": \"2024-01-15\",\n  \"dueDate\": \"2024-06-30\",\n  \"organizationId\": \"{{organizationId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project details retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('tasks');",
									"    pm.expect(jsonData.data).to.have.property('members');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Project Name\",\n  \"status\": \"ACTIVE\",\n  \"priority\": \"MEDIUM\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Project Member",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"role\": \"MEMBER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"members"
							]
						}
					},
					"response": []
				}
			],
			"description": "Project management endpoints"
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "List Project Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Tasks listed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/tasks?limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "TODO",
									"disabled": true
								},
								{
									"key": "assigneeId",
									"value": "{{userId}}",
									"disabled": true
								},
								{
									"key": "priority",
									"value": "HIGH",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Task created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data.status).to.eql('TODO');",
									"    pm.environment.set('taskId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{$randomJobTitle}}\",\n  \"description\": \"{{$randomLoremSentence}}\",\n  \"priority\": \"MEDIUM\",\n  \"assigneeId\": \"{{userId}}\",\n  \"dueDate\": \"2024-02-15\",\n  \"estimatedHours\": 8\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Task Title\",\n  \"description\": \"Updated description\",\n  \"priority\": \"HIGH\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Task status updated', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.status).to.eql('IN_PROGRESS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"IN_PROGRESS\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Task",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assigneeId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/assign",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Task management endpoints"
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get Task Comments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Comment added successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('content');",
									"    pm.environment.set('commentId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"{{$randomLoremSentence}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Updated comment content\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Task comments"
		},
		{
			"name": "sessions",
			"item": [
				{
					"name": ":id",
					"item": [
						{
							"name": "Get a session",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/auth/sessions/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"sessions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all sessions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all sessions",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"sessions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/check",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Home",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if needed",
					"// Add any global pre-request logic here"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test scripts",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Log slow responses",
					"if (pm.response.responseTime > 1000) {",
					"    console.log('Slow response:', pm.info.requestName, pm.response.responseTime + 'ms');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userPassword",
			"value": "TestPass123!",
			"type": "default"
		},
		{
			"key": "userEmail",
			"value": "gautam03gt@gmail.com",
			"type": "default"
		},
		{
			"key": "userUsername",
			"value": "gautam",
			"type": "default"
		}
	]
}