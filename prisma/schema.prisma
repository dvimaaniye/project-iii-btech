generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id        String  @id @default(uuid(7)) @db.VarChar(36)
    email     String  @unique
    username  String  @unique
    password  String
    firstName String
    lastName  String?

    isEmailVerified Boolean @default(false)

    ownedOrganizations      Organization[]       @relation("OrganizationOwner")
    organizationMemberships OrganizationMember[]

    ownedProjects       Project[]       @relation("ProjectOwner")
    projectMemberships  ProjectMember[] @relation("ProjectMember")
    addedProjectMembers ProjectMember[] @relation("ProjectMemberAdder")

    assignedTasks Task[] @relation("TaskAssignee")
    createdTasks  Task[] @relation("TaskCreator")

    comments Comment[]

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@map("user")
}

model Organization {
    id          String  @id @default(uuid(7)) @db.VarChar(36)
    name        String
    description String?
    ownerId     String
    inviteCode  String  @unique

    owner    User                 @relation("OrganizationOwner", fields: [ownerId], references: [id])
    members  OrganizationMember[]
    projects Project[]

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@map("organization")
}

model Project {
    id             String        @id @default(uuid(7)) @db.VarChar(36)
    name           String
    description    String?
    status         ProjectStatus @default(PLANNING)
    priority       Priority      @default(LOW)
    startDate      DateTime?
    dueDate        DateTime?
    organizationId String?
    ownerId        String

    organization Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    owner        User            @relation("ProjectOwner", fields: [ownerId], references: [id])
    members      ProjectMember[]
    tasks        Task[]

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@map("project")
}

model Task {
    id          String     @id @default(uuid(7)) @db.VarChar(36)
    name        String
    description String?
    status      TaskStatus @default(TODO)
    priority    Priority   @default(LOW)
    position    Int
    assigneeId  String?
    projectId   String
    createdById String
    dueDate     DateTime?

    assignee  User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
    project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdBy User      @relation("TaskCreator", fields: [createdById], references: [id])
    comments  Comment[]

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@map("task")
}

model Comment {
    id       String @id @default(uuid(7)) @db.VarChar(36)
    content  String
    taskId   String
    authorId String

    task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id])

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@map("comment")
}

model OrganizationMember {
    id             String           @id @default(uuid(7)) @db.VarChar(36)
    userId         String
    organizationId String
    role           OrganizationRole
    joinedAt       DateTime         @default(now())

    user         User         @relation(fields: [userId], references: [id])
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@unique([userId, organizationId])
    @@map("organization_member")
}

model ProjectMember {
    id        String      @id @default(uuid(7)) @db.VarChar(36)
    userId    String
    projectId String
    role      ProjectRole
    addedAt   DateTime    @default(now())
    addedById String

    user    User    @relation("ProjectMember", fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    addedBy User    @relation("ProjectMemberAdder", fields: [addedById], references: [id])

    createdAt  DateTime  @default(now())
    modifiedAt DateTime  @updatedAt
    deletedAt  DateTime?

    @@unique([userId, projectId])
    @@map("project_member")
}

enum ProjectStatus {
    PLANNING
    ACTIVE
    ON_HOLD
    COMPLETED
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    IN_REVIEW
    DONE
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum ProjectRole {
    OWNER
    ADMIN
    MEMBER
}

enum OrganizationRole {
    OWNER
    ADMIN
    MEMBER
}
